{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "[NN] Lab session 4 - tf.data & CNNs.ipynb",
      "version": "0.3.2",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "metadata": {
        "id": "MpZyPTy2uD6k",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "# Neural Networks\n",
        "## Lab session 4: tf.data & convolutional neural networks"
      ]
    },
    {
      "metadata": {
        "id": "CN_lqPoYACGb",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Remember to enable GPU in the runtime before running the code!"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "2v9Px04W_x62",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Import TensorFlow and enable eager execution\n",
        "import tensorflow as tf\n",
        "import tensorflow.contrib.eager as tfe\n",
        "tf.enable_eager_execution()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "V9_DHrstKJb_",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Import NumPy\n",
        "import numpy as np"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ddGJTRrN-5Ca",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Download MNIST dataset (try also Fashion MNIST!)\n",
        "(Xtrain, ytrain), (Xtest, ytest) = tf.keras.datasets.mnist.load_data()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Vwdry7PzMoQW",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Cast targets to np.int32\n",
        "ytrain = ytrain.astype(np.int32)\n",
        "ytest = ytest.astype(np.int32)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "N5dFqo7g_0Tm",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Example of tf.data\n",
        "train_it = tf.data.Dataset.from_tensor_slices((Xtrain, ytrain))\n",
        "test_it = tf.data.Dataset.from_tensor_slices((Xtest, ytest))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "l9UWkNbhETFh",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Get a single image\n",
        "for xb, yb in train_it.batch(1):\n",
        "  break;"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "0J4IVD0mEpfg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        },
        "outputId": "bbee0eaf-0936-4738-e0e3-6f937b76ad43"
      },
      "cell_type": "code",
      "source": [
        "# Show the image\n",
        "import matplotlib.pyplot as plt\n",
        "plt.imshow(xb[0])\n",
        "plt.show()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAUsAAAFKCAYAAACU6307AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAEyJJREFUeJzt3X1MlfX/x/HXiRPCGTgEOWxu3c2p\nsdQ5GxaaJjezdGt5UxkMXcstrUneZI5R0o2bKGFLpE2htCZrnUW2anOD7GYzhzhZo0ErzC1HZohF\n5g0anPj98dv3TBTlzeEcrgM9H391PufN57yvrnrtc53rXNfl6unp6REA4KZucboBABgOCEsAMCAs\nAcCAsAQAA8ISAAwISwAwICwBwICwBAADd7B/uGXLFjU2NsrlcqmwsFBTp04NZV8AEFGCCsujR4/q\n5MmT8vl8OnHihAoLC+Xz+ULdGwBEjKAOw+vq6pSdnS1JGj9+vM6dO6cLFy6EtDEAiCRBheXZs2c1\nZsyYwOvExES1t7eHrCkAiDQhOcHDvTgAjHRBhaXX69XZs2cDr8+cOaPk5OSQNQUAkSaosJw1a5Zq\namokSc3NzfJ6vYqLiwtpYwAQSYI6Gz59+nTdc889evLJJ+VyufTKK6+Eui8AiCgubv4LAP3jCh4A\nMCAsAcCAsAQAA8ISAAwISwAwICwBwICwBAADwhIADAhLADAgLAHAgLAEAAPCEgAMCEsAMCAsAcCA\nsAQAA8ISAAwISwAwICwBwICwBAADwhIADAhLADAgLAHAgLAEAAPCEgAMCEsAMCAsAcCAsAQAA8IS\nAAwISwAwICwBwICwBAADwhIADAhLADAgLAHAgLAEAAPCEgAMCEsAMCAsAcCAsAQAA8ISAAwISwAw\nICwBwMDtdAMY+f79919z7ZUrV8LYSW+xsbHq7OzsNfb++++b/vbixYvmz/nhhx/MtW+99Za5trCw\n8LqxnTt3Kj8/v9dYeXm5ec7Y2Fhz7fbt2011zz77rHnOSMbKEgAMglpZ1tfXa82aNZowYYIkaeLE\nidq0aVNIGwOASBL0YfiMGTNUVlYWyl4AIGJxGA4ABkGH5c8//6xVq1YpJydHhw8fDmVPABBxXD09\nPT0D/aO2tjY1NDRo/vz5am1t1fLly1VbW6vo6Ohw9AgAjgvqO8uUlBQtWLBAknT77bdr7Nixamtr\n02233RbS5jAy8NMhfjo0EgR1GP7ZZ5/p3XfflSS1t7frjz/+UEpKSkgbA4BIEtTKMjMzUxs2bNCX\nX36prq4uvfrqqxyCAxjRggrLuLg47dq1K9S9AEDECuoED5x37tw5c63f7zfXNjY29jmekZGhr7/+\nOvC6trbWPOdff/1lrq2oqDDXDpbf71dUVFTYP+fOO+8012ZlZZlr//dV2NX62qb4+HjznLNnzzbX\nlpaWmuomTZpknjOS8TtLADAgLAHAgLAEAAPCEgAMCEsAMCAsAcCAsAQAA8ISAAwISwAwICwBwIDL\nHSPMr7/+aqqbNm2aec6Ojo5g2wkYqksDh9JgtumWW+zrjC+++MJcO5BbpPXlvvvuU319fa8xr9dr\n/vu4uDhzbXJysrl2JGBlCQAGhCUAGBCWAGBAWAKAAWEJAAaEJQAYEJYAYEBYAoABYQkABkE93RHh\nk5SUZKobyHPaQ3EFT6SZN2+eufZm/05zcnJ6vd6/f79pzlGjRpk/f+7cuebaULjvvvuG9PP+K1hZ\nAoABYQkABoQlABgQlgBgQFgCgAFhCQAGhCUAGBCWAGBAWAKAAWEJAAZc7hhhrA+seu+998xzVldX\nm2vT09Nv+N7HH38c+OclS5aY5xyIBx54wFT36aefmueMjo6+4XtVVVW9Xv/++++mOXfs2GH+fIwM\nrCwBwICwBAADwhIADAhLADAgLAHAgLAEAAPCEgAMCEsAMCAsAcCAsAQAA1dPT0+P000gvK5cuWKu\nvdGlgS6XS1f/p1JYWGies6SkxFz79ddfm+rmzJljnhMIBdPKsqWlRdnZ2YHraE+fPq1ly5YpNzdX\na9as0T///BPWJgHAaf2G5aVLl7R58+ZeN1goKytTbm6uPvjgA91xxx0DulEDAAxH/YZldHS0Kisr\n5fV6A2P19fXKysqSJGVkZKiuri58HQJABOj3Fm1ut1tud++yzs7OwHdbSUlJam9vD093ABAhBn0/\nS84PRb5Ro0aFZB6XyxX45+LiYvPfDaQWiFRBhaXH49Hly5cVExOjtra2XofoiDycDQcGL6jfWc6c\nOVM1NTWSpNraWs2ePTukTQFApOl3ZdnU1KRt27bp1KlTcrvdqqmpUWlpqQoKCuTz+TRu3DgtXLhw\nKHoFAMf0G5aTJ0/Wvn37rhvfu3dvWBoCgEjEA8v+A8JxgmfMmDEhmfNaZWVlprqBfPVzdd9AsLg2\nHAAMCEsAMCAsAcCAsAQAA8ISAAwISwAwICwBwICwBAADwhIADAhLADDggWUIykCeu5Sbm2uu/eST\nT0x1jY2N5jknT55srgVuhJUlABgQlgBgQFgCgAFhCQAGhCUAGBCWAGBAWAKAAWEJAAaEJQAYEJYA\nYMDljgi7P//801w7fvx4U11iYqJ5zhs913779u164YUXeo3NmjXLNOeiRYvMn8/TJUcGVpYAYEBY\nAoABYQkABoQlABgQlgBgQFgCgAFhCQAGhCUAGBCWAGDAFTyIKEePHjXVPfzww+Y5z5071+e43+9X\nVFSUeZ6r7dmzx1y7ZMkSc21cXFww7WAIsLIEAAPCEgAMCEsAMCAsAcCAsAQAA8ISAAwISwAwICwB\nwICwBAADwhIADNxONwBcbcaMGaa65uZm85zr1q274XuPP/54r9cfffSRac6nn37a/PknTpww1774\n4ovm2vj4eHMtBo+VJQAYmMKypaVF2dnZqqqqkiQVFBTokUce0bJly7Rs2TJ988034ewRABzX72H4\npUuXtHnzZqWnp/caX79+vTIyMsLWGABEkn5XltHR0aqsrJTX6x2KfgAgIpnvZ7lz506NGTNGeXl5\nKigoUHt7u7q6upSUlKRNmzYpMTEx3L0CgGOCOhv+6KOPKiEhQampqaqoqFB5ebmKiopC3RtwQ6dP\nnzbX3uhs+Icffqgnn3yy15j1bPhAvPTSS+ZazoZHrqDOhqenpys1NVWSlJmZqZaWlpA2BQCRJqiw\nzM/PV2trqySpvr5eEyZMCGlTABBp+j0Mb2pq0rZt23Tq1Cm53W7V1NQoLy9Pa9euVWxsrDwej4qL\ni4eiVwBwTL9hOXnyZO3bt++68YceeigsDQFAJOLpjhjxLl++3Od4TEzMde8dOXLENGd2drb58wfy\nv9hjjz1mrvX5fOZaDB6XOwKAAWEJAAaEJQAYEJYAYEBYAoABYQkABoQlABgQlgBgQFgCgAFhCQAG\nXO4IBGHUqFHm2u7ubnOt222/xez3339/3dikSZP0008/XTeGwWNlCQAGhCUAGBCWAGBAWAKAAWEJ\nAAaEJQAYEJYAYEBYAoABYQkABvbLBYAI8ttvv5lr9+/f3+f46tWrVV5e3musrq7ONOdArsoZiLS0\nNHPtxIkTBzSOwWFlCQAGhCUAGBCWAGBAWAKAAWEJAAaEJQAYEJYAYEBYAoABYQkABoQlABjwwDKE\nXXt7u7n27bffNtXt3bvXPOevv/7a57jf71dUVJR5nmAN5DOeeOIJc21VVVUw7SBIrCwBwICwBAAD\nwhIADAhLADAgLAHAgLAEAAPCEgAMCEsAMCAsAcCAsAQAA57uiF4uXLjQ53hcXFyv9z7//HPznK+/\n/rq5tqWlxVzrpMzMTHPt1q1bzbX33ntvMO1gCJjCsqSkRA0NDeru7tbKlSs1ZcoUbdy4UX6/X8nJ\nyXrjjTcUHR0d7l4BwDH9huWRI0d0/Phx+Xw+dXR0aNGiRUpPT1dubq7mz5+vN998U9XV1crNzR2K\nfgHAEf1+Z5mWlqYdO3ZIkkaPHq3Ozk7V19crKytLkpSRkWF+MD0ADFf9hmVUVJQ8Ho8kqbq6WnPm\nzFFnZ2fgsDspKWlAt+ACgOHIfILn4MGDqq6u1p49ezRv3rzAOLfDHFni4uJM7+Xk5JjnHEjtUPP7\n/U63gGHCFJaHDh3Srl279M477yg+Pl4ej0eXL19WTEyM2tra5PV6w90nhsh/6Wz4YG7+y9nw/55+\nD8PPnz+vkpIS7d69WwkJCZKkmTNnqqamRpJUW1ur2bNnh7dLAHBYvyvLAwcOqKOjQ2vXrg2Mbd26\nVS+//LJ8Pp/GjRunhQsXhrVJAHBav2G5dOlSLV269LrxgTwDBQCGO67gGaYuXrxorm1tbTXX5uXl\n9Tl+7NgxzZ07N/D6u+++M8/ptKtPSPb33muvvWaaMy0tzfz5LpfLXIvIxbXhAGBAWAKAAWEJAAaE\nJQAYEJYAYEBYAoABYQkABoQlABgQlgBgQFgCgIGrhxtShl1nZ6e59uobltzMt99+a57zxx9/NNfe\nyGBuZzYQCxYsMNUVFRWZ55w2bVqf47feequ6urquGwP6wsoSAAwISwAwICwBwICwBAADwhIADAhL\nADAgLAHAgLAEAAPCEgAMCEsAMODpjtf45ZdfTHVbtmzpc7yiokLPPPNMr7GDBw+aP//kyZPmWid5\nPB5z7ebNm821zz33nKkuOjraPOfNcHkjrFhZAoABYQkABoQlABgQlgBgQFgCgAFhCQAGhCUAGBCW\nAGBAWAKAAQ8su8b27dtNdRs3buxzfKge7DV9+nRzbU5OjrnW7e77oq7nn39eZWVlgdfXXqV0MzEx\nMeZaIFKxsgQAA8ISAAwISwAwICwBwICwBAADwhIADAhLADAgLAHAgLAEAAPCEgAMuNwRAAxMT3cs\nKSlRQ0ODuru7tXLlSn311Vdqbm5WQkKCJGnFihWaO3duOPsEAEf1G5ZHjhzR8ePH5fP51NHRoUWL\nFun+++/X+vXrlZGRMRQ9AoDj+g3LtLQ0TZ06VZI0evRodXZ2yu/3h70xAIgkA/rO0ufz6dixY4qK\nilJ7e7u6urqUlJSkTZs2KTExMZx9AoCjzGF58OBB7d69W3v27FFTU5MSEhKUmpqqiooK/f777yoq\nKgp3rwDgGNNPhw4dOqRdu3apsrJS8fHxSk9PV2pqqiQpMzNTLS0tYW0SAJzWb1ieP39eJSUl2r17\nd+Dsd35+vlpbWyVJ9fX1mjBhQni7BACH9XuC58CBA+ro6NDatWsDY4sXL9batWsVGxsrj8ej4uLi\nsDYJAE7jR+kAYMDljgBgQFgCgAFhCQAGhCUAGBCWAGBAWAKAAWEJAAaEJQAYEJYAYEBYAoABYQkA\nBoQlABgQlgBgQFgCgAFhCQAGhCUAGBCWAGBAWAKAAWEJAAaEJQAYEJYAYEBYAoABYQkABoQlABgQ\nlgBgQFgCgAFhCQAGhCUAGBCWAGDgduJDt2zZosbGRrlcLhUWFmrq1KlOtBFS9fX1WrNmjSZMmCBJ\nmjhxojZt2uRwV8FraWnRc889p6eeekp5eXk6ffq0Nm7cKL/fr+TkZL3xxhuKjo52us0BuXabCgoK\n1NzcrISEBEnSihUrNHfuXGebHKCSkhI1NDSou7tbK1eu1JQpU4b9fpKu366vvvrK8X015GF59OhR\nnTx5Uj6fTydOnFBhYaF8Pt9QtxEWM2bMUFlZmdNtDNqlS5e0efNmpaenB8bKysqUm5ur+fPn6803\n31R1dbVyc3Md7HJg+tomSVq/fr0yMjIc6mpwjhw5ouPHj8vn86mjo0OLFi1Senr6sN5PUt/bdf/9\n9zu+r4b8MLyurk7Z2dmSpPHjx+vcuXO6cOHCULeBm4iOjlZlZaW8Xm9grL6+XllZWZKkjIwM1dXV\nOdVeUPrapuEuLS1NO3bskCSNHj1anZ2dw34/SX1vl9/vd7grB8Ly7NmzGjNmTOB1YmKi2tvbh7qN\nsPj555+1atUq5eTk6PDhw063EzS3262YmJheY52dnYHDuaSkpGG3z/raJkmqqqrS8uXLtW7dOv35\n558OdBa8qKgoeTweSVJ1dbXmzJkz7PeT1Pd2RUVFOb6vHPnO8mo9PT1OtxASd955p1avXq358+er\ntbVVy5cvV21t7bD8vqg/I2WfPfroo0pISFBqaqoqKipUXl6uoqIip9sasIMHD6q6ulp79uzRvHnz\nAuPDfT9dvV1NTU2O76shX1l6vV6dPXs28PrMmTNKTk4e6jZCLiUlRQsWLJDL5dLtt9+usWPHqq2t\nzem2Qsbj8ejy5cuSpLa2thFxOJuenq7U1FRJUmZmplpaWhzuaOAOHTqkXbt2qbKyUvHx8SNmP127\nXZGwr4Y8LGfNmqWamhpJUnNzs7xer+Li4oa6jZD77LPP9O6770qS2tvb9ccffyglJcXhrkJn5syZ\ngf1WW1ur2bNnO9zR4OXn56u1tVXS/38n+79fMgwX58+fV0lJiXbv3h04SzwS9lNf2xUJ+8rV48Ba\nvbS0VMeOHZPL5dIrr7yiu+++e6hbCLkLFy5ow4YN+vvvv9XV1aXVq1frwQcfdLqtoDQ1NWnbtm06\ndeqU3G63UlJSVFpaqoKCAl25ckXjxo1TcXGxbr31VqdbNetrm/Ly8lRRUaHY2Fh5PB4VFxcrKSnJ\n6VbNfD6fdu7cqbvuuiswtnXrVr388svDdj9JfW/X4sWLVVVV5ei+ciQsAWC44QoeADAgLAHAgLAE\nAAPCEgAMCEsAMCAsAcCAsAQAA8ISAAz+D4GsMlewG9H3AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fbdb967c208>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "wlFqgmYiEvQq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "outputId": "7c72717c-4273-4371-ecda-f58cdab5becf"
      },
      "cell_type": "code",
      "source": [
        "# Check shape and label\n",
        "print(xb.shape)\n",
        "print(yb)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(1, 28, 28)\n",
            "tf.Tensor([5], shape=(1,), dtype=int32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "NiJ6z6MBGN7e",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Definitely not the most efficient way!\n",
        "def _parse_example(x, y):\n",
        "  x = tf.cast(tf.reshape(x, (28, 28, 1)), tf.float32) / tf.constant(255.0)\n",
        "  return x, y"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "CsC-hp3dH-G7",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Map all examples with the function\n",
        "# Check documentation of Dataset.map here: https://www.tensorflow.org/api_docs/python/tf/data/Dataset#map\n",
        "train_it = train_it.map(_parse_example)\n",
        "test_it = test_it.map(_parse_example)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Qz-TK2JTEtwo",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Architecture is taken from here: https://www.tensorflow.org/tutorials/estimators/cnn#building_the_cnn_mnist_classifier\n",
        "\n",
        "class CNN(tf.keras.Model):\n",
        "  \n",
        "  def __init__(self):\n",
        "    super(CNN, self).__init__()\n",
        "    \n",
        "    self.conv1 = tf.layers.Conv2D(filters=32, kernel_size=[5, 5], padding=\"same\", activation=tf.nn.relu)\n",
        "    self.pool1 = tf.layers.MaxPooling2D(pool_size=[2, 2], strides=2)\n",
        "    \n",
        "    \n",
        "    self.conv2 = tf.layers.Conv2D(filters=64, kernel_size=[5, 5], padding=\"same\", activation=tf.nn.relu)\n",
        "    self.pool2 = tf.layers.MaxPooling2D(pool_size=[2, 2], strides=2)\n",
        "\n",
        "\n",
        "    self.dense = tf.layers.Dense(1024, activation=tf.nn.relu)\n",
        "    self.dropout = tf.layers.Dropout(0.4)\n",
        "    \n",
        "    self.logits = tf.layers.Dense(units=10)\n",
        "    \n",
        "  def call(self, x, training=False):\n",
        "    \n",
        "    x = self.pool1(self.conv1(x))\n",
        "    x = self.pool2(self.conv2(x))\n",
        "    x = self.dense(tf.reshape(x, (-1, 7 * 7 * 64)))\n",
        "    x = self.dropout(x, training=training)\n",
        "    return self.logits(x)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "0sELoChMIxgq",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Initialize\n",
        "cnn = CNN()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "BSuCPjX1IzAY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "1a41adde-23fa-4760-9945-5d4e81d2fa90"
      },
      "cell_type": "code",
      "source": [
        "for xb, yb in train_it.batch(1):\n",
        "  print(cnn(xb))\n",
        "  break;"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor(\n",
            "[[-0.00517298 -0.04869059  0.12427396 -0.01968962  0.04045241  0.08706979\n",
            "  -0.11381523  0.03049949  0.02493023  0.03556203]], shape=(1, 10), dtype=float32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "oihZvXbzJYLy",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def loss(net, x, y):\n",
        "  return tf.losses.sparse_softmax_cross_entropy(logits=net(x, training=True), labels=y)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Gr-VEdwTJI5w",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "opt = tf.train.AdamOptimizer()\n",
        "epochs = 10"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "d_GvW9nYJUww",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 197
        },
        "outputId": "dfeeb950-1173-4a1f-a296-b6bcaaa3ccdc"
      },
      "cell_type": "code",
      "source": [
        "all_acc = np.zeros(epochs)\n",
        "\n",
        "for epoch in range(epochs):\n",
        "  \n",
        "  acc = tfe.metrics.SparseAccuracy()\n",
        "  for xb, yb in test_it.batch(32):\n",
        "    ypred = cnn(xb)\n",
        "    acc(predictions=ypred, labels=yb)\n",
        "  all_acc[epoch] = acc.result().numpy()\n",
        "  print('Test accuracy at epoch {} is {} %'.format(epoch, all_acc[epoch] * 100))\n",
        "  \n",
        "  for xb, yb in train_it.shuffle(1000).batch(32):\n",
        "    opt.minimize(lambda: loss(cnn, xb, yb))"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test accuracy at epoch 0 is 9.82 %\n",
            "Test accuracy at epoch 1 is 98.76 %\n",
            "Test accuracy at epoch 2 is 98.95 %\n",
            "Test accuracy at epoch 3 is 98.65 %\n",
            "Test accuracy at epoch 4 is 99.2 %\n",
            "Test accuracy at epoch 5 is 98.96000000000001 %\n",
            "Test accuracy at epoch 6 is 98.49 %\n",
            "Test accuracy at epoch 7 is 99.03 %\n",
            "Test accuracy at epoch 8 is 99.0 %\n",
            "Test accuracy at epoch 9 is 99.11 %\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "pcCrGFTzLwzr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        },
        "outputId": "89fe0ded-7286-4b15-83d8-c87b2b94aded"
      },
      "cell_type": "code",
      "source": [
        "plt.plot(all_acc)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fbdb0447390>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fbdb3db69b0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}
